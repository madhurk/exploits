package test.madhur.view;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import test.madhur.adapters.CatalogAdapter;
import test.madhur.loaders.CatalogLoader;
import test.madhur.model.Catalog;
import test.madhur.presenter.CatalogPresenter;
import test.madhur.presenter.CatalogPresenterImpl;
import test.madhur.viewutils.DividerItemDecoration;
import test.madhur.viewutils.LogFilter;

/**
 * A placeholder fragment containing a simple view.
 */
public class CatalogFragment extends Fragment implements LoaderManager.LoaderCallbacks<Catalog>, CatalogView{

    private RecyclerView recyclerView;
    private CatalogAdapter catalogAdapter;
    private CatalogPresenter catalogPresenter;
    private ProgressBar progressBar;
    private TextView tvError;

    private static final int CATALOG_LOADER_ID = 1;

    public CatalogFragment() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        catalogPresenter = new CatalogPresenterImpl(this);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_catalog, container, false);
        recyclerView = (RecyclerView)view.findViewById(R.id.rv_catalog);
        progressBar = (ProgressBar)view.findViewById(R.id.pb_loading);
        tvError = (TextView)view.findViewById(R.id.tv_error);
        return view;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
        recyclerView.setHasFixedSize(true);
        RecyclerView.ItemDecoration itemDecoration = new
                DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL_LIST);
        recyclerView.addItemDecoration(itemDecoration);
        catalogAdapter = new CatalogAdapter(getActivity());
        catalogAdapter.setOnItemClickListener(new CatalogClickListener() {
            @Override
            public void onCourseClick(int courseId) {
                catalogPresenter.onCourseClicked(courseId);
            }
        });
        recyclerView.setAdapter(catalogAdapter);
        catalogPresenter.onScreenCreated();
    }

    @Override
    public Loader<Catalog> onCreateLoader(int id, Bundle args) {
        Log.d(LogFilter.LIFECYCLE_TAG, "Loader.onCreateLoader called");
        return new CatalogLoader(getActivity());
    }

    @Override
    public void onLoadFinished(Loader<Catalog> loader, Catalog data) {
        Log.d(LogFilter.LIFECYCLE_TAG, "Loader.onLoadFinished called");
        catalogPresenter.onDataReceived(data);
    }

    @Override
    public void showCourseListing(Catalog data){
        if(data != null) {
            catalogAdapter.setItems(data.getElements());
            catalogAdapter.notifyDataSetChanged();
        }else{
            catalogPresenter.onDataError();
        }
    }

    @Override
    public void showCourseDetails(int courseId) {
        Intent intent = new Intent(getActivity(), CourseActivity.class);
        Bundle bundle = new Bundle();
        bundle.putInt(CourseActivity.COURSE_ID, courseId);
        intent.putExtras(bundle);
        startActivity(intent);
    }

    @Override
    public void onLoaderReset(Loader<Catalog> loader) {
    }

    @Override
    public void showProgress() {
        progressBar.setVisibility(View.VISIBLE);
    }

    @Override
    public void hideProgress() {
        progressBar.setVisibility(View.GONE);
    }

    @Override
    public void showError() {
        tvError.setVisibility(View.VISIBLE);
    }

    @Override
    public void hideError() {
        tvError.setVisibility(View.GONE);
    }

    @Override
    public void loadNewData(){
        Log.d(LogFilter.LIFECYCLE_TAG, "Calling initLoader()");
        getLoaderManager().initLoader(CATALOG_LOADER_ID, null, this);
    }

    @Override
    public void showMessage(String message) {
        Toast.makeText(getActivity(), message, Toast.LENGTH_SHORT).show();
    }
}
